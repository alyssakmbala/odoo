  <menuitem id="buy_picking_menu_action" action="stock.stock_picking_type_action" name="Achat"/>
        <menuitem id="sell_menu_action" action="point_of_sale.action_pos_config_kanban" name="Vente"/>
 #
 <header>
                    <field name="current_user_has_liked" invisible="1"/>
                    <button  name="do_like_book" type="object" string="J'aime"
                            class="oe_read_only" attrs="{'invisible': [('current_user_has_liked','=',True)]}"/>
                    <button name="do_unlike_book" type="object" string="Je n'aime plus"
                            class="oe_read_only" attrs="{'invisible': [('current_user_has_liked','=',False)]}"/>
                </header>

 <div name="button_box" class="oe_button_box">
                        <button class="oe_stat_button"
                                type="action" icon="fa-heart"
                                name="%(action_book_button)d"
                                help="Number of likes"
                                disabled="True">
                            <field string="ont aimé" name="likes_count"
                                   widget="statinfo"/>
                        </button>
                    </div>

#
 _sql_constraints = [
        ('name_unique',
         'UNIQUE(name)',
         "Le nom du livre doit être unique."),
    ]
#
import datetime

import psycopg2
from odoo.exceptions import ValidationError
from odoo.tests.common import TransactionCase


class TestBook(TransactionCase):

    def test_unique_name(self):
        book1 = self.env['book'].create({
            'name': 'Livre1'
        })

        print('Valeur du nom de book1 : ' + str(book1.name))

        with self.assertRaises(psycopg2.errors.UniqueViolation):
            book2 = self.env['book'].create({
                'name': 'Livre1'
            })

    def test_date_when_before(self):
        book = self.env['book'].create({
            'name': 'Livre',
            'publication_date': datetime.date(2010, 12, 31)
        })

    def test_date_when_today(self):
        with self.assertRaises(ValidationError):
            book = self.env['book'].create({
                'name': 'Livre',
                'publication_date': datetime.date.today()
            })

    def test_date_when_after(self):
        with self.assertRaises(ValidationError):
            book = self.env['book'].create({
                'name': 'Livre',
                'publication_date': datetime.date(2050, 12, 31)
            })

    def test_pages_when_positive(self):
        book = self.env['book'].create({
            'name': 'Livre',
            'pages': 617
        })

    def test_pages_when_zero(self):
        with self.assertRaises(ValidationError):
            book = self.env['book'].create({
                'name': 'Livre',
                'pages': 0
            })

    def test_pages_when_negative(self):
        with self.assertRaises(ValidationError):
            book = self.env['book'].create({
                'name': 'Livre',
                'pages': -10
            })
